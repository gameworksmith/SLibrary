window.documentDetailJSON={"code":200,"data":{"content":"<div lang=\"zh-CN\" class=\"icms-help-docs-content\">\n\n          <main id=\"topic-1917945\">\n            <p data-tag=\"shortdesc\" id=\"shortdesc-tuj-xks-97a\" class=\"shortdesc\">本文介绍如何使用阿里云智能语音服务提供的Java SDK，包括SDK的安装方法及SDK代码示例。</p><div data-tag=\"conbody\" id=\"conbody-z8q-hxq-jty\" class=\"conbody\"><section id=\"section-8pt-2pz-zow\" class=\"section\"><h2 data-tag=\"title\" id=\"title-pwb-h1e-r0c\" class=\"title\">前提条件</h2><p id=\"p-wbd-q1e-xd7\">在使用SDK之前，请先阅读接口说明，详情请参见<span><a title=\"\" href=\"/document_detail/84435.htm#topic-2572243\">接口说明</a></span>。</p></section><section id=\"section-irv-j5t-jog\" class=\"section\"><h2 data-tag=\"title\" id=\"title-pxz-9kw-w5j\" class=\"title\">下载安装</h2><ol id=\"ol-ml0-opw-x4b\"><li id=\"li-lm1-b3d-oy5\"><p id=\"p-uz0-oe1-oa8\">从Maven服务器<span><a href=\"https://gw.alipayobjects.com/os/bmw-prod/8c951418-55a4-4f9b-b39f-00a6852166b1.zip\">下载最新版本SDK</a></span>。</p><pre data-tag=\"codeblock\" outputclass=\"language-xml\" id=\"codeblock-3wj-clq-2le\" class=\"pre codeblock language-xml\"><code>&lt;dependency&gt;\n    &lt;groupId&gt;com.alibaba.nls&lt;/groupId&gt;\n    &lt;artifactId&gt;nls-sdk-tts&lt;/artifactId&gt;\n    &lt;version&gt;2.2.1&lt;/version&gt;\n&lt;/dependency&gt;</code></pre></li><li id=\"li-zgc-p8r-fme\"><p id=\"p-kf5-o61-edt\">解压该ZIP文件。</p></li><li id=\"li-0zn-wk4-wla\"><p id=\"p-51k-xkz-cqh\">在pom.xml文件所在的目录运行<code data-tag=\"code\" class=\"code\">mvn package</code>，会在target目录生成可执行JAR：nls-example-tts-2.0.0-jar-with-dependencies.jar。</p></li><li id=\"li-4e8-qm6-ilu\"><p id=\"p-jqp-smx-37y\">将JAR包拷贝到您应用所在的服务器，用于快速验证及压测服务。</p></li><li id=\"li-lv9-fzo-4v0\"><p id=\"p-u7s-2lx-190\">服务验证。</p><p id=\"p-usl-7es-m1x\">运行如下代码，并按提示提供相应参数。运行后在命令执行目录生成logs/nls.log。</p><pre id=\"codeblock-568-3kt-5z0\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>java -cp nls-example-tts-2.0.0-jar-with-dependencies.jar com.alibaba.nls.client.SpeechSynthesizerDemo</code></pre></li><li id=\"li-84x-0w2-smr\"><p id=\"p-vjm-nn5-ih0\">服务压测。</p><p id=\"p-gta-zwc-5s2\">运行如下代码，并按提示提供相应参数。其中阿里云服务url参数为：<code data-tag=\"code\" class=\"code\">wss://nls-gateway.cn-shanghai.aliyuncs.com/ws/v1</code>，并发数根据您的购买情况进行选择。</p><pre id=\"codeblock-x4w-9s8-y1h\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>java -jar nls-example-tts-2.0.0-jar-with-dependencies.jar</code></pre><div type=\"note\" id=\"note-6fr-gvs-nx8\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"p-lwu-i6m-nz1\">自行压测超过2路并发将产生费用。</p></div></div></li></ol></section><section id=\"section-lum-d4y-th6\" class=\"section\"><h2 data-tag=\"title\" id=\"title-4gf-gp9-mgl\" class=\"title\">关键接口</h2><ul id=\"ul-30s-ugg-51s\"><li id=\"li-9qu-bn5-rgq\"><p id=\"p-c1b-2po-jpq\">NlsClient：语音处理客户端，利用该客户端可以进行一句话识别、实时语音识别和语音合成的语音处理任务。该客户端为线程安全，建议全局仅创建一个实例。</p></li><li id=\"li-fet-adg-lis\"><p id=\"p-68q-s61-8n1\">SpeechSynthesizer：语音合成处理类，通过该接口设置请求参数，发送请求。非线程安全。</p></li><li id=\"li-2p4-x6u-e55\"><p id=\"p-l7j-7yz-v6m\">SpeechSynthesizerListener：语音合成监听类，监听返回结果。非线程安全。需要实现如下两个抽象方法：</p><pre id=\"codeblock-7ha-9v7-k5x\" data-tag=\"codeblock\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>  /**\n   * 接收语音合成二进制数据\n   */\n  abstract public void onMessage(ByteBuffer message);\n  /**\n   * 语音合成结束事件通知\n   *\n   * @param response\n   */\n  abstract public void onComplete(SpeechSynthesizerResponse response);</code></pre><p id=\"p-l4i-uck-uy9\">更多介绍，请参见<span><a href=\"http://g.alicdn.com/idst-fe/nls-sdk-doc-api/2.0.6/GateWay_Java_2.0.2/index.html\">Java API接口说明</a></span>。</p></li></ul><div type=\"notice\" id=\"note-jv2-4qt-rub\" class=\"note note-notice\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note notice\"></i></div><div class=\"noteContentSpan\"><strong>注意 </strong><p id=\"p-9xi-jrh-40w\"></p><p id=\"p-lj5-6zw-nnf\">SDK调用注意事项：</p><ul id=\"ul-ltu-qra-89l\"><li id=\"li-y38-9vy-e2h\"><p id=\"p-7ch-n1r-ghn\">NlsClient使用Netty框架，NlsClient对象的创建会消耗一定时间和资源，一经创建可以重复使用。建议调用程序将NlsClient的创建和关闭与程序本身的生命周期相结合。</p></li><li id=\"li-aez-y60-z5p\"><p id=\"p-nxv-q8y-ixz\">SpeechSynthesizer对象不可重复使用，一个语音合成任务对应一个SpeechSynthesizer对象。例如，N个文本要进行N次语音合成任务，创建N个SpeechSynthesizer对象。</p></li><li id=\"li-js8-dax-6gi\"><p id=\"p-2l2-kjo-dj8\">SpeechSynthesizerListener对象和SpeechSynthesizer对象是一一对应的，不能将一个SpeechSynthesizerListener对象设置到多个SpeechSynthesizer对象中，否则不能将各语音合成任务区分开。</p></li><li id=\"li-sj5-4ty-uq6\"><p id=\"p-akn-44b-k6t\">Java SDK依赖Netty网络库，如果您的应用依赖Netty，其版本需更新至4.1.17.Final及以上。</p></li></ul></div></div></section><section id=\"section-5j9-uor-jxc\" class=\"section\"><h2 data-tag=\"title\" id=\"title-ild-9p7-68f\" class=\"title\">代码示例</h2><div type=\"note\" id=\"note-o0f-la2-7fe\" class=\"note note-note\"><div class=\"note-icon-wrapper\"><i class=\"icon-note note note\"></i></div><div class=\"noteContentSpan\"><strong>说明 </strong><p id=\"p-ypn-73p-sk4\"></p><ul id=\"ul-o22-e4c-prr\"><li id=\"li-s8v-0ew-888\"><p id=\"p-bzu-vim-dq3\">示例中使用SDK内置的默认语音合成服务的外网访问服务URL，如果您使用位于阿里云上海地域的ECS，且需要通过内网访问服务URL，则在创建NlsClient对象时，设置内网访问的URL：</p><pre data-tag=\"codeblock\" id=\"codeblock-pfs-670-pz0\" outputclass=\"language-java\" class=\"pre codeblock language-java\"><code>client = new NlsClient(\"ws://nls-gateway.cn-shanghai-internal.aliyuncs.com/ws/v1\", accessToken);</code></pre><p id=\"p-ep6-ipo-vd5\"></p></li><li id=\"li-9sp-pcz-rkm\"><p id=\"p-zey-m4i-t1m\">示例中将合成的音频保存在文件中，如果您需要播放音频且对实时性要求较高，建议使用流式播放，即边接收语音数据边播放，减少延时。</p></li></ul></div></div><pre data-tag=\"codeblock\" outputclass=\"language-java\" id=\"codeblock-ume-cne-5cw\" class=\"pre codeblock language-java\"><code>import java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.ByteBuffer;\nimport com.alibaba.nls.client.protocol.NlsClient;\nimport com.alibaba.nls.client.protocol.OutputFormatEnum;\nimport com.alibaba.nls.client.protocol.SampleRateEnum;\nimport com.alibaba.nls.client.protocol.tts.SpeechSynthesizer;\nimport com.alibaba.nls.client.protocol.tts.SpeechSynthesizerListener;\nimport com.alibaba.nls.client.protocol.tts.SpeechSynthesizerResponse;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n/**\n * 此示例演示了：\n *      语音合成API调用。\n *      动态获取token。\n *      流式合成TTS。\n *      首包延迟计算。\n */\npublic class SpeechSynthesizerDemo {\n    private static final Logger logger = LoggerFactory.getLogger(SpeechSynthesizerDemo.class);\n    private static long startTime;\n    private String appKey;\n    NlsClient client;\n    public SpeechSynthesizerDemo(String appKey, String accessKeyId, String accessKeySecret) {\n        this.appKey = appKey;\n        //应用全局创建一个NlsClient实例，默认服务地址为阿里云线上服务地址。\n        //获取token，使用时注意在accessToken.getExpireTime()过期前再次获取。\n        AccessToken accessToken = new AccessToken(accessKeyId, accessKeySecret);\n        try {\n            accessToken.apply();\n            System.out.println(\"get token: \" + accessToken.getToken() + \", expire time: \" + accessToken.getExpireTime());\n            client = new NlsClient(accessToken.getToken());\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    public SpeechSynthesizerDemo(String appKey, String accessKeyId, String accessKeySecret, String url) {\n        this.appKey = appKey;\n        AccessToken accessToken = new AccessToken(accessKeyId, accessKeySecret);\n        try {\n            accessToken.apply();\n            System.out.println(\"get token: \" + accessToken.getToken() + \", expire time: \" + accessToken.getExpireTime());\n            if(url.isEmpty()) {\n                client = new NlsClient(accessToken.getToken());\n            }else {\n                client = new NlsClient(url, accessToken.getToken());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n    private static SpeechSynthesizerListener getSynthesizerListener() {\n        SpeechSynthesizerListener listener = null;\n        try {\n            listener = new SpeechSynthesizerListener() {\n                File f=new File(\"tts_test.wav\");\n                FileOutputStream fout = new FileOutputStream(f);\n                private boolean firstRecvBinary = true;\n                //语音合成结束\n                @Override\n                public void onComplete(SpeechSynthesizerResponse response) {\n                    //调用onComplete时表示所有TTS数据已接收完成，因此为整个合成数据的延迟。该延迟可能较大，不一定满足实时场景。\n                    System.out.println(\"name: \" + response.getName() +\n                        \", status: \" + response.getStatus()+\n                        \", output file :\"+f.getAbsolutePath()\n                    );\n                }\n                //语音合成的语音二进制数据\n                @Override\n                public void onMessage(ByteBuffer message) {\n                    try {\n                        if(firstRecvBinary) {\n                            //计算首包语音流的延迟，收到第一包语音流时，即可以进行语音播放，以提升响应速度（特别是实时交互场景下）。\n                            firstRecvBinary = false;\n                            long now = System.currentTimeMillis();\n                            logger.info(\"tts first latency : \" + (now - SpeechSynthesizerDemo.startTime) + \" ms\");\n                        }\n                        byte[] bytesArray = new byte[message.remaining()];\n                        message.get(bytesArray, 0, bytesArray.length);\n                        fout.write(bytesArray);\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                    }\n                }\n                @Override\n                public void onFail(SpeechSynthesizerResponse response){\n                    //task_id是调用方和服务端通信的唯一标识，当遇到问题时需要提供task_id以便排查。\n                    System.out.println(\n                        \"task_id: \" + response.getTaskId() +\n                            //状态码 20000000 表示识别成功\n                            \", status: \" + response.getStatus() +\n                            //错误信息\n                            \", status_text: \" + response.getStatusText());\n                }\n            };\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return listener;\n    }\n    public void process() {\n        SpeechSynthesizer synthesizer = null;\n        try {\n            //创建实例，建立连接。\n            synthesizer = new SpeechSynthesizer(client, getSynthesizerListener());\n            synthesizer.setAppKey(appKey);\n            //设置返回音频的编码格式\n            synthesizer.setFormat(OutputFormatEnum.WAV);\n            //设置返回音频的采样率\n            synthesizer.setSampleRate(SampleRateEnum.SAMPLE_RATE_16K);\n            //发音人\n            synthesizer.setVoice(\"siyue\");\n            //语调，范围是-500~500，可选，默认是0。\n            synthesizer.setPitchRate(100);\n            //语速，范围是-500~500，默认是0。\n            synthesizer.setSpeechRate(100);\n            //设置用于语音合成的文本\n            synthesizer.setText(\"欢迎使用阿里巴巴智能语音合成服务，您可以说北京明天天气怎么样啊\");\n            // 是否开启字幕功能（返回相应文本的时间戳），默认不开启，需要注意并非所有发音人都支持该参数。\n            synthesizer.addCustomedParam(\"enable_subtitle\", false);\n            //此方法将以上参数设置序列化为JSON格式发送给服务端，并等待服务端确认。\n            long start = System.currentTimeMillis();\n            synthesizer.start();\n            logger.info(\"tts start latency \" + (System.currentTimeMillis() - start) + \" ms\");\n            SpeechSynthesizerDemo.startTime = System.currentTimeMillis();\n            //等待语音合成结束\n            synthesizer.waitForComplete();\n            logger.info(\"tts stop latency \" + (System.currentTimeMillis() - start) + \" ms\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            //关闭连接\n            if (null != synthesizer) {\n                synthesizer.close();\n            }\n        }\n    }\n    public void shutdown() {\n        client.shutdown();\n    }\n    public static void main(String[] args) throws Exception {\n        String appKey = \"您的appkey\";\n        String id = \"您的AccessKey Id\";\n        String secret = \"您的AccessKey Secret\";\n        String url = \"\"; //默认值：wss://nls-gateway.cn-shanghai.aliyuncs.com/ws/v1\n        if (args.length == 3) {\n            appKey   = args[0];\n            id       = args[1];\n            secret   = args[2];\n        } else if (args.length == 4) {\n            appKey   = args[0];\n            id       = args[1];\n            secret   = args[2];\n            url      = args[3];\n        } else {\n            System.err.println(\"run error, need params(url is optional): \" + \"&lt;app-key&gt; &lt;AccessKeyId&gt; &lt;AccessKeySecret&gt; [url]\");\n            System.exit(-1);\n        }\n        SpeechSynthesizerDemo demo = new SpeechSynthesizerDemo(appKey, id, secret, url);\n        demo.process();\n        demo.shutdown();\n    }\n}</code></pre></section></div>\n          </main>\n        \n        \n\n</div>","directoryPath":{"children":[{"children":[{"children":[null],"id":84437,"level":5,"nodeType":1,"pipProduct":{},"showType":1,"title":"Java SDK"}],"id":84425,"level":4,"nodeType":8,"pipProduct":{},"showType":1,"title":"语音合成"}],"id":30413,"level":3,"nodeType":8,"pipProduct":{"code":"nls","name":"智能语音交互"},"showType":1,"title":"智能语音交互"},"lastModifiedTime":1631762904000,"level":5,"nodeId":84437,"nodeType":1,"productNodeVO":{"id":30413,"level":3,"nodeType":8,"pipProduct":{"code":"nls","name":"智能语音交互"},"showType":1,"title":"智能语音交互"},"productUrl":"https://ai.aliyun.com/nls?spm=5176.12825654.h2v3icoap.195.e9392c4aZkclVc","showType":1,"supportFlawSubmit":false,"title":"Java SDK"},"success":true}